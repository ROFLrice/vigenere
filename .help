#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <ctype.h>

// define number of characters in alphabet
#define ALPHABET_LEN 26


int main(int argc, string argv[])
{
    // declare variables
    int key_Value = 0;
    bool check;
    //closes program if user doesn't provide command line argument
    if(argc != 2)
    {
        printf("Please provide key\n");
        return 1;
    }
    else
    {
    //check to make sure argument is alphabetical
        for(int c = 0; c<strlen(argv[1]);c++)
        {
            if(isalpha(argv[1][c]))
            {
                check = true;
            }
            else
            {
                check = false;
                printf("Please provide valid alphabetic key\n");
                return 1;
            }
        }
    }
    
        //save argument in key
        string key = argv[1];
        
        //promt user for text
        printf("plaintext: ");
        string plain = get_string();
        
        if (plain != NULL)
        {
            //label for cipher text
            printf("ciphertext: ");
        
            //iterate over the string in plain and string in key
            for(int i = 0, j = 0, length = strlen(plain); i < length; i++)
            {
                //variable to hold letter being encrypted
                int let = 0;    
                
                //wrap around key 
                if (j >= strlen(key))
                    {
                        j = 0;
                    }
                
                //tracks place in keyword
                key_Value = key[j];
                
                // Check if text is upper case or lower case and encypt accordingly
                if (isupper(plain[i]))
                {
                    key_Value = (key_Value -  'A');
                    //convert to alphabet index for equation then back to ascII for printf
                    let = (((int)plain[i] - 'A' + key_Value) % ALPHABET_LEN) + 'A';
                    printf("%c", (char) let);
                    j++;
                }
                else if (islower(plain[i]))
                {
                    key_Value = (key_Value -  'a');
                    let = (((int)plain[i] - 'a' + key_Value) % ALPHABET_LEN) + 'a';
                    printf("%c", (char) let);
                    j++;
                }
                else
                {
                    //for spaces
                    printf("%c", plain[i]); 
                }
            
            }
            printf("\n");
            return 0;
        }
}
               
