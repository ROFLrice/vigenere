#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <ctype.h>

//getting segmentation error

// define number of characters in alphabet
#define ALPHABET_LEN 26


int main(int argc, string argv[])
{
    // declare variables
    int shift;
    int key_Value;
    
    //closes program if user doesn't provide command line argument
    if(argc != 2 || isalpha(argv[1]) == false)
    {
        printf("Please provide valid alphabetic key\n");
        return 1;
    }
    //when user provides valid alphabetic argument
    else//error here 'expected expression'
    {
        //save key as a string
        string key = argv[1];
        
        //promt user for text
        printf("plaintext: ");
        string plain = get_string();
        
        if (plain != NULL)
        {
            //label for cipher text
            printf("ciphertext: ");
        
            //iterate over the string in plain
            for(int i = 0, j = 0, length = strlen(plain); i < length; i++, j++)
            {
            // start the key again if key shorter than PlainText
            if (j >= strlen(key))
            {
                j = 0;
            }
                
            key_Value = key[j];
                
            // skip key[j] if plain[i] != alpha character
            if (!isalpha(plain[i]))
            {
                j = (j - 1);
            }  
            
            // converts to alphabet index for uppercase
            if (isupper(key_Value))
            {
                key_Value = (key_Value -  'A');
            }
 
            // converts to alphabet index for lowercase
            if (islower(key_Value))
            {
                key_Value = (key_Value - 'a');
            }
               
            // encryption
            shift = (plain[i] + key_Value);
 
            // wrapping after Z for uppercase letters
            if (isupper(plain[i]) && (shift > 'Z'))
            {
                shift = (shift - ALPHABET_LEN);
            }
 
            // wrapping after z for lowercase letters
            if (islower(plain[i]) && (shift > 'z'))
            {
                shift = (shift - ALPHABET_LEN);
            }
 
             // if character is alphabetical, print encrypted result
             if (isalpha(plain[i]))
            {
                printf("%c", shift);
            }
 
            // print spaces 
            else
            {
                printf("%c", plain[i]);
            }
 
            }
        }
    }
    //print new line
    printf("\n");
    return 0;
}   
               
               
